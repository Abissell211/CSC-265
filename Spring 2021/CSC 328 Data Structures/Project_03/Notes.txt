#include <iostream>	// std::cout, endl
#include <cstdlib>	// string conversion
#include <fstream> 	// file processing -- probably not needed
#include <string>	// string processing
#include <iomanip> 	// std::setw
#include <cassert>	// assert
#include "queue.h"	// includes information from header file
#include <math.h>

using namespace std;

/*====== Function Prototypes =====*/
void RadixSort(Queue a[], Queue &temp, int t); // sorts based off Queue formula
bool isDigit(string n); // checks for good data, integer
int QueueFormula(int x, int t); // Dictates which formula to use
void QueueArrDisplay(Queue a[]); // For displaying the queues
void QueueToTemp(Queue a[], Queue &temp); // Moves all numbers from queues to Temp queue

int main() 
{
	Queue a[10]; // 10 queues
	Queue temp; // for all queue data sorting
	ifstream f; // input file handle
	string inbuffer; // line file storage
	int r; // var for integer conversion
	string n; // used for integer conversion from input, atoi
	int m = 0; // keeps track of largest number
	f.open("input.txt"); // opens file for reading
	assert(!f.fail()); // make sure file is open/available
	while(!f.eof())
	{
		f >> inbuffer; // pushes line to string inbuffer
		if(isDigit(inbuffer) == true) // checks string for digits
		{
			r = atoi(inbuffer.c_str()); // convert to integer
			if(m < r) // check to see if the new r value is the largest number
			{
				m = r; // set it to m
			}
			temp.Enqueue(r); // pushes the number into the temp queue
		}
	}
	f.close(); // close input file after processing

	/*====== After File Processing =====*/
	char buf[6];
	m = sprintf(buf, "%d",  m);  // saves integer m 

	for(int t = 0; t < m; t++) // digit processing, n being the size of the largest number
	{ 
		RadixSort(a, temp, t);
		cout << endl;
		QueueArrDisplay(a);
		cout << endl;
		QueueToTemp(a, temp);
		temp.Display();
		cout << "\n" << endl;
	}	
	assert(!f.fail());
	return 0;
}

/*====== Functions =====*/
void QueueToTemp(Queue a[], Queue &temp) // Moves all numbers from queues to Temp queue
{	int e = 0, x;
	do
	{ 
		if(a[e].GetSize() != 0)
		{
			x = a[e].Dequeue();
			temp.Enqueue(x);
		}
		else
		{
			e++;
		}	
	} while(e != 10);
}
int QueueFormula(int x, int t) // Dictates which formula to use
{	int number = 0;
	double y = 1.0;
	if(t == 0)
	{
		number = x/1;
	}
	else if(t == 1)
	{
		number = x/(10);
	}
	else if(t == 2)
	{
		number = x/(y*100);
	}
	else if(t == 3)
	{
		number = x/(y*1000);
	}
	else if(t == 4)
	{
		number = x/(y*10000);
	}
	else
	{
		number = x/(y*100000);
	}
	return number;
}
void QueueArrDisplay(Queue a[]) // For displaying the queues
{
	for(int q = 0; q < 10; q++)
	{
		cout << "Queue[" << q << "]: ";
		a[q].Display();
	}
}
void RadixSort(Queue a[], Queue &temp, int t) // sorts based off Queue formula
{	int x, x1, v;
	while(temp.GetSize() != 0)
	{	
		x = temp.Dequeue();
		cout << "temp dequed: " << x << endl;
 		x1 = QueueFormula(x,t);
		v = x1%10;
		a[v].Enqueue(x); 
		cout << x << " was enqued in queue[" << v << "]." << endl;
	}
}
bool isDigit(string n) // checks for good data, integer
{
	bool digit = false;
	for(int k = 0; n[k] != 0; k++)
	{
		if(n[k] <= 57 && n[k] >= 48) // checks ascii code for digits
		{
			digit = true;
		}
		else
		{
			digit = false;
		}
	}
		return digit;
}